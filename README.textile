h1. Rack-I18n-Locale-Switcher

This rack-application is used to switch the I18n.locale (in a rails application as middleware).
I developed this app during my "10 Minutes on Rails":http://devteam.sales-lentz.lu/10minutes.html talks at "Sales-Lentz::DevTeam":http://devteam.sales-lentz.lu/.



h2. History


h3. Basic functionality

* Create a new "Rack::Request":http://rack.rubyforge.org/doc/classes/Rack/Request.html object an extract the params and the session.
* Instead of using a query string like @?locale=de@ it is possible to set the locale inside the path. 
  For example _http://www.example.com/de_, _http://www.example.com/de/posts/123/comments_. 
  Using this method should be prefered.
* store the @locale@ value in @session["locale"]@ if present
* Set the "I18n.locale":http://guides.rubyonrails.org/i18n.html to whatever is stored inside @session["locale"]@ or, if not present, a defined default locale
* Removing the locale part from @ENV[REQUEST_URI | REQUEST_PATH | PATH_INFO]@, if there is something like a locale part, 
  so that the including App doesn't see the locale


h3. Available locales and default locale

The next step to make this app more modular was the configuration from the rails app which include this as a middleware.
You can set an array with available locales and you can define a default locale.

The locale get processed as followed:
* *if a locale is given*
** if it matched a available locale it will be stored in the session, otherwise the default locale is used.

* *if no locale is given*
** if a locale is stored in the session, it will be used.
** if no locale is stored, and the first HTTP_ACCEPT_LANGUAGE matched a available locale it will be used.

* in any other case the default locale will be used.

The code for extraction the HTTP_ACCEPT_LANGUAGE is taken from the "Rack-Contrib Project":http://github.com/rack/rack-contrib/blob/master/lib/rack/contrib/locale.rb



h2. Dependency

The following rubygem's should be present
* i18n
* rack
* rack-test
* rspec
* sinatra

<pre>bundle install</pre>


h2. Installation

copy @rack_i18n_locale_switcher.rb@ to @RAILS_ROOT/lib/rack/@

insert this in @config/environment.rb@ inside the @Rails::Initializer.run do |config|@ block:
<pre><code>require File.join(File.dirname(__FILE__), '../lib/rack/', 'rack_i18n_locale_switcher')
config.middleware.use Rack::I18nLocaleSwitcher, :available_locales => [:your, :available, :locales], :default_locale => :en</code></pre>

Define the available locales inside the array. The locales should be set as symbols. Also define your preferred default locale.

h3. Changing language proposal

Since the language handling is processed in a Rack- Application the routing in Rails has no knowledge about the locale part inside the path. 
So you can't use the url generation to generate href's for changing the language.

I created a little helper example to generate these links. The idea is to use the current controller and action and put the new locale in front of it:

<pre>"/#{locale}" + url_for( :controller => controller_name(), :action => action_name() )</pre>

For two of the RESTful actions (create and update) an exception handler was implemented. If you want to change the language in one of this actions,
the new or edit action get called instead. You can extend this helper if you have other actions which should not be called with GET.


<pre>def link_to_locale(*args)
  options = args.extract_options!
  locale = args.first
  name = args.second
  case action_name()
  when "create" ; action = "new"
  when "update" ; action = "edit"
  else  action = action_name()
  end
  url = "/#{locale}" + url_for(:controller => controller_name(), :action => action)
  
  link_to name, url, options
end</pre>

This helper is integrated in the example application. Inside a view you can call it like this:

<pre>- [:en, :fr, :de].each do |locale| 
  = link_to_locale locale, I18n.t("language_#{locale}")</pre>

If you have an enhancement or a better solution don't hesitate to contact me.





h2. Test

To run the test's just execute 
<pre>rake spec</pre>

I used a FakeApp to simulate this App as a middleware.This is done with the help of "RackBuilder":http://rack.rubyforge.org/doc/classes/Rack/Builder.html

<pre>Rack::Builder.app do
  use Rack::I18nLocaleSwitcher
  run Rack::Test::FakeApp.new
end</pre>


You can run the FakeApp directly:
<pre>cd spec/fixtures
rackup</pre>


The FakeApp respond to the following requests:

* get '/'
* get '/home'
* get '/imprint'
* get '/locale'
* get '/test'



h2. Future

The next features that could be implement:

* Rewrite all hyperlinks in the returned result of the rails app, so that _http://www.example.com/posts/123/comments?locale=de_ gets converted to _http://www.example.com/posts/123/comments/de_
* create a gem
* predict the default locale based on the users ip address



h2. Links

* "Rack documentation":http://rack.rubyforge.org/doc/
* "Rack-Test":http://github.com/brynary/rack-test
* "Testing Sinatra with Rack::Test":http://www.sinatrarb.com/testing.html
* "RSpec":http://rspec.info/documentation/
